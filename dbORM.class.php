<?php
/**
 * Class Generator
 * Author: 	BESMIR ALIA (besmiralia@gmail.com)
 * Date:	May 20, 2011
 * Date:	Jul 30, 2016 - Updated for mysqli
 * 
 * Description:
 * 	Just a quick little class I wrote to generate classes for database tables quickly.  It makes a few assumptions, namely that you are using mysql
 * 	as your database.  Also that you cannot change your key/index field.  It's pretty basic, but works for what I needed.  The goal is not to
 * 	generate a 'do everything' class for you, but instead generate the basic frame I found myself coding into every class, which gets
 * 	very boring after a while, and let the user go back in and fill in the more specific bits.  Hopefully this will help someone else out.  
 * 	If it does, feel free to shoot me an email and let me know ;)
 * 
 */
class dbORM {
	private $_className=null;//NAME OF THE CLASS TO GENERATE
	private $_tableName=null;//NAME OF THE TABLE IN DB
	private $_keyField=null;//PRIMARY KEY FIELD
	private $_dbFields=array();//TABLE FIELDS
	private $_indexFields=array();//INDEX, UNIQUE FIELDS
	private $suffix ="cls_";//CHANGE YOUR PREFIX
	
	/**
	 * Public Constructor
	 *
	 * @param string $className
	 * @param string $tableName
	 * @return dbORM
	 */
	public function dbORM($className, $tableName)
	{ 
		// set private datamembers
		$this->_className = $className;
		$this->_tableName = $tableName;
	}
	/*
	* returns array of index fields
	*/
	public function GetIndexes()
	{
		$arr = array();
		foreach ($this->_indexFields as $IndexField)
		{
			if($IndexField->getIndex()=='INDEX')
			{
				array_push($arr,$IndexField);
			}
		}
		return $arr;
	}
	/*
	* returns array of unique fields
	*/
	public function GetUnique()
	{
		$arr = array();
		foreach ($this->_indexFields as $IndexField)
		{
			if($IndexField->getIndex()=='UNIQUE')
			{
				array_push($arr,$IndexField);
			}
		}
		return $arr;
	}
	/**
	 * Adds an additional datamember to the class
	 *
	 * @param string $field
	 * @param string $name
	 * @param string $dataType
	 * @param boolean $key
	 */
	public function addDataMember($field, $name=null, $dataType=null)
	{
		$class = new ClassMember($field, $name, $dataType, null);
		array_push($this->_dbFields,$class);
	}
	public function addKeyMember($field, $name=null, $index='INDEX')
	{
		$class = new ClassMember($field, $name, null, $index);
		//echo $index;
		if ($index=='PRIMARY KEY'){$this->_keyField = $class; return; }
		$add=1;
		if($index=='INDEX')
		foreach($this->_indexFields as $c)	if($c->getField()==$field && $c->getIndex()=='INDEX'){$add=0;break;}
			
		if($add)array_push($this->_indexFields,$class);
	}

	/**
	 * Generates your class, writes to the filename you pass in, or to cls_classname.php
	 *
	 * @param string $filename (optional)
	 * @return boolean
	 */
	public function generateClass($filename=null)
	{
		// Determine what filename to write output into
		if ($filename == null)
			$filename = $this->suffix.$this->_className . ".php";//CHANGE YOUR SUFFIX
			
		// Check to make sure this file does not already exist
		if (file_exists($filename))
		{
			echo "Error - File $filename already exists!, Overriding...";
			unlink($filename);
			//return(false);				// Do not overwrite existing file
		}
			
		// Open file
		$FD = fopen($filename,"w");
		if ($FD === false)
		{
			echo "Error - Failed to open filename: $filename";
			return(false);
		}
		
		// Make sure they set a primary key
		if ($this->_keyField == null)
		{
			echo "Error - No key field set!";
			return(false);
		}
			
		echo "Write the header<br/>";
		$s=$this->_writeHeader();
		
		echo "Write the constructor<br/>";
		$s.=$this->_writeConstructor();
		
		echo "Write GetAll<br/>";
		$s.=$this->_writeGetAll();
		
		echo "Write Find<br/>";
		$s.=$this->_writeFind();
		echo "Write First<br/>";
		$s.=$this->_writeFirst();
		echo "Write Aggregate<br/>";
		$s.=$this->_writeAggregate();
		
		echo "Write Unique Indexes<br/>";
		$s.=$this->_writeUnique();
		echo "Write Indexes<br/>";
		$s.=$this->_writeIndexes();
		
		//Write Getters
		// $this->_writeGetters();
		
		//Write Setters
		// $this->_writeSetters();
			
		echo "Write Insert<br/>";
		$s.=$this->_writeInsert();
		
		echo "Write Update<br/>";
		$s.=$this->_writeUpdate();
		
		echo "Write Delete<br/>";
		$s.=$this->_writeDelete();
				
		echo "Write closing<br/>";
		$s.="}\n?>";
		fwrite($FD,$s);
		
		// Close FileDescriptor
		fclose($FD);
		
		// All Done!
		return(true);
	}
	
	/**
	 * Writes the Header, class declaration, and private variable declarations for the class
	 *
	 * @param resource $FD
	 */
	private function _writeHeader()
	{
		$s="<?php\n";
		$s.="/**\n";
		$s.=(" * Class : " . $this->_className."\n");
		$s.=(" * Date : " . date("Y-m-d H:i:s",time()) ."\n");
		$s.=(" * \n");
		$s.=(" * This class was auto-generated by Database ORM\n");
		$s.=(" * (Besmir Alia, besmiralia@gmail.com)\n");
		$s.=(" */\n"); 
		//$s.=("include_once('start.php');\n");
		//$s.=("include_once('config.php');\n");
		//$s.=("include_once('db.php');\n");
		
		$s.=("\n");
		$s.=("class " . $this->_className . " {\n\n");
		
		// write private datamembers
		// write the index
		$s.=("\tpublic \$".$this->_keyField->getName()."=null;\n");
		
		// Write other fields
		foreach ($this->_dbFields as $field)
		{
			// Do not write keyField twice
			if ($field->getField() != $this->_keyField->getField())
			{
				// Write field
				$s.=("\tpublic \$".$field->getName()."=null;\n");
			}
		}
		$s.=("\n");
		return $s;
	}
	
	/**
	 * Writes the constructor for the class
	 *
	 * @param resource $FD
	 */
	private function _writeConstructor()
	{
		$s=("\t/**\n");
		$s.=("\t * Public Constructor\n");
		$s.=("\t *\n");
		//$s.=("\t * @param ".$this->_keyField->getType()." \$id\n");
		//$s.=("\t * @return ".$this->_className."\n");
		$s.=("\t */\n");
		
		$s.=("\tpublic function " . $this->_className . "() {}\n");
		
		
		$s.=("\tpublic function get_by_" . $this->_keyField->getName() . "(\$id) {\n");
		$s.="\t\t\$mres = 'mysqli_real_escape_string';\n";
		$s.="\t\tglobal \$link;\n";
				
		$out = "\t\t\$SQL = \"select * from `".$this->_tableName."` where `".$this->_keyField->getField()."` = '\".\$mres(\$link,\$id).\"' limit 1\";\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
		$out.= "\t\tif (\$row = mysqli_fetch_array(\$result)) {\n";
		// Add Grab key
		$out.= "\t\t\t\$this->".$this->_keyField->getName()." = \$row['".$this->_keyField->getField()."'];\n";
		
		// Loop thru fields
		foreach ($this->_dbFields as $field)
		{
			// Do not do key field twice
			if ($field->getField() != $this->_keyField->getField())
			{
				$out.= "\t\t\t\$this->".$field->getName()." = \$row['".$field->getField()."'];\n";
			}
		}
		$out.= "\t\t}\n";
		$out.= "\t\treturn \$this;\n";
		
		$s.=($out);
		
		$s.=("\t}\n\n");
		return $s;
	}
	/**
	 * Writes the GetAll method for the class
	 *
	 */
	private function _writeGetAll()
	{	
		$s=("\t/**\n");
		$s.=("\t * GetAll\n");
		$s.=("\t *\n");
		$s.=("\t * @return Array() of ".$this->_className."\n");
		$s.=("\t */\n");
		
		$s.=("\tpublic function GetAll() {\n");
		$s.="\t\tglobal \$link;\n";
		
		$out = "\t\t\$SQL = \"select * from `".$this->_tableName."` \";\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
		$out.="\t\t\$items = array();\$i=0;\n";
		$out.= "\t\twhile (\$row = mysqli_fetch_array(\$result)) {\n";
		
		$out.="\t\t\t\$item = new ".$this->_className."();\n";
		// Loop thru fields
		foreach ($this->_dbFields as $field)
		{
			// Do not do key field twice
			//if ($field != $this->_keyField)
			//{
				$out.= "\t\t\t\$item->".$field->getName()." = \$row['".$field->getField()."'];\n";
			//}
		}
		$out.="\t\t\t\$items[\$i++]=\$item;\n";
		$out.= "\t\t}\n";
		
		$out.="\t\treturn \$items;\n";
		$s.=($out);
		
		$s.=("\t}\n\n");
		return $s;
	}
	/**
	 * Writes the Find method for the class
	 *
	 * @param WhereClause $findStr
	 */
	private function _writeFind()
	{
	
		$s=("\t/**\n");
		$s.=("\t * Find\n");
		$s.=("\t *\n");
		$s.=("\t * @return Array() of ".$this->_className."\n");
		$s.=("\t */\n");
		
		$s.=("\tpublic function Find(\$findStr) {\n");
		$s.="\t\tglobal \$link;\n";
		
		
		$out = "\t\t\$SQL = \"select * from `".$this->_tableName."` where \".\$findStr;\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
		$out.="\t\t\$items = array();\$i=0;\n";;
		$out.= "\t\twhile (\$row = mysqli_fetch_array(\$result)) {\n";
		
		$out.="\t\t\t\$item = new ".$this->_className."();\n";
		// Loop thru fields
		foreach ($this->_dbFields as $field)
		{
			// Do not do key field twice
			//if ($field != $this->_keyField)
			//{
				$out.= "\t\t\t\$item->".$field->getName()." = \$row['".$field->getField()."'];\n";
			//}
		}
		$out.="\t\t\t\$items[\$i++]=\$item;\n";
		$out.= "\t\t}\n";
		
		$out.="\t\treturn \$items;\n";
		$s.=($out);
		
		$s.=("\t}\n\n");
		return $s;
	}
	/**
	 * Writes the First method for the class
	 *
	 * @param WhereClause $findStr
	 */
	private function _writeFirst()
	{
	
		$s=("\t/**\n");
		$s.=("\t * First\n");
		$s.=("\t *\n");
		$s.=("\t * @return ".$this->_className."\n");
		$s.=("\t */\n");
		
		$s.=("\tpublic function First(\$findStr) {\n");
		$s.="\t\tglobal \$link;\n";
		
		$out = "\t\t\$SQL = \"select * from `".$this->_tableName."` where \".\$findStr;\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
		$out.="\t\t\$item = new ".$this->_className."();\n";
		$out.= "\t\tif (\$row = mysqli_fetch_array(\$result)) {\n";		
		
		// Loop thru fields
		foreach ($this->_dbFields as $field)
		{
			// Do not do key field twice
			//if ($field != $this->_keyField)
			//{
				$out.= "\t\t\t\$this->".$field->getName()." = \$row['".$field->getField()."'];\n";
			//}
		}
		//$out.="\t\t\t\$items[\$i++]=\$item;\n";
		$out.= "\t\t}\n";
		
		$out.="\t\treturn \$this;\n";
		$s.=($out);
		
		$s.=("\t}\n\n");
		return $s;
	}
	/**
	 * Writes the Aggregate method for the class
	 *
	 * @param WhereClause $findStr
	 */
	private function _writeAggregate()
	{
	
		$s=("\t/**\n");
		$s.=("\t * Aggregate(Sum,Average,Min,Max,Count)\n");
		$s.=("\t *\n");
		$s.=("\t * @return int, double\n");
		$s.=("\t */\n");
		
		$s.=("\tpublic function Aggregate(\$formula,\$findStr) {\n");
		$s.="\t\tglobal \$link;\n";
		
		$out = "\t\t\$SQL = \"select \".\$formula.\" from `".$this->_tableName."` where \".\$findStr;\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
		$out.= "\t\tif (\$row = mysqli_fetch_array(\$result)) {\n";	
		$out.= "\t\t\treturn \$row[0];\n";
		$out.= "\t\t}\n";
		
		$out.="\t\treturn null;\n";
		$s.=($out);
		
		$s.=("\t}\n\n");
		return $s;
	}
	/**
	 * Writes the Get By Unique for the class
	 *
	 * @params unique keys
	 */
	private function _writeUnique()
	{
		$s="";
		$arr = $this->GetUnique();
		if(count($arr)>0)
		{
			echo "\nWRITING UNIQUE FOR TABLE ". $this->_tableName;
			$out="";
			$s.=("\t// Unique Methods\n\n");
			
			// Write the keyField first
			$s.=("\t/**\n");
			$s.=("\t * Gets value of unique key\n");
			$s.=("\t *\n");
			$s.=("\t */\n");
			
			$out = "\tpublic function get_by_unique(";
			foreach ($arr as $IndexField)$out.= "\$".$IndexField->getField().",";
			$out.= "\$a=null";
			//$out.= "(\$id) {\n";
			$out.= "){\n";
			$out.="\t\t\$mres = 'mysqli_real_escape_string';\n";
			$out.="\n\t\tglobal \$link;\n\t\t\$SQL = \"select * from `".$this->_tableName."` where 1 ";
			foreach ($arr as $IndexField)$out.= "and `".$IndexField->getField()."`='\".\$mres(\$link,\$".$IndexField->getField().").\"' ";
			//.$IndexField->getField()."=\$id\";\n";
			$out.= "\";\n";
			$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
			//$out.= "\t\t\$items = array();\n";
			$out.= "\t\tif (\$row = mysqli_fetch_array(\$result)) {\n";
			// Add Grab key
			//$out.= "\t\t\t\$this->_".$this->_keyField->getName()." = \$row['".$this->_keyField->getField()."'];\n";
			
			//$out.="\t\t\t\$item = new ".$this->_className."();\n";
			// Loop thru fields
			foreach ($this->_dbFields as $field)
			{
				// Do not do key field twice
				//if ($field != $this->_keyField)
				//{
					$out.= "\t\t\t\$this->".$field->getName()." = \$row['".$field->getField()."'];\n";
				//}
			}
			//$out.="\t\t\t\$items[\$item->".$this->_keyField->getName()."]=\$item;\n";
			$out.= "\t\t}\n";
			
			$out.="\t\treturn \$this;\n";
			$s.=($out);
			
			$s.=("\t}\n\n");
		}
		return $s;
	}
	
	/**
	 * Write the Get By Index Methods
	 *
	 * @param IndexField $id
	 */
	private function _writeIndexes()
	{
		$s="";
		foreach ($this->_indexFields as $IndexField)
		{
			$out="";
			if($IndexField->_index=='INDEX')
			{
				$s.=("\t// Indexer Methods\n\n");
				
				// Write the keyField first
				$s.=("\t/**\n");
				$s.=("\t * Gets value of ".$IndexField->getName()."\n");
				$s.=("\t *\n");
				$s.=("\t */\n");
				
				$out = "\tpublic function get_by_".$IndexField->getName()."(\$id) {\n";
				$out.="\t\t\$mres = 'mysqli_real_escape_string';\n";
		
				$out.="\t\tglobal \$link;\n";
		
				$out.= "\t\t\$SQL = \"select * from `".$this->_tableName."` where ".$IndexField->getField()."='\".\$mres(\$link,\$id).\"'\";\n";
				$out.= "\t\t\$result = \$link->query(\$SQL) or die(\"Error in SQL Syntax: \$SQL,\" . mysqli_error(\$link));\n\n";
				$out.="\t\t\$items = array();\$i=0;\n";
				$out.= "\t\twhile (\$row = mysqli_fetch_array(\$result)) {\n";
				// Add Grab key
				//$out.= "\t\t\t\$this->_".$this->_keyField->getName()." = \$row['".$this->_keyField->getField()."'];\n";
				
				$out.="\t\t\t\$item = new ".$this->_className."();\n";
				// Loop thru fields
				foreach ($this->_dbFields as $field)
				{
					// Do not do key field twice
					//if ($field != $this->_keyField)
					//{
						$out.= "\t\t\t\$item->".$field->getName()." = \$row['".$field->getField()."'];\n";
					//}
				}
				$out.="\t\t\t\$items[\$i++]=\$item;\n";
				$out.= "\t\t}\n";
				
				$out.="\t\treturn \$items;\n";
				$s.=($out);
				
				$s.=("\t}\n\n");
			}
		}
		return $s;
	}
	
	/**
	 * Write CRUD methods for the class
	 *
	 * @param resource $FD
	 */
	 private function _writeInsert()
	{
		//$values="";
		$out = "\tpublic function Insert() {\n";
		$out.="\t\t\$mres = 'mysqli_real_escape_string';\n";
		$out.="\t\tglobal \$link;\n";
		
		$out.= "\t\t\$SQL = \"insert into `".$this->_tableName."`(";
		
		$farr = [];
		$values = [];
		foreach ($this->_dbFields as $field)
		{
			if ($field->getField() != $this->_keyField->getField())
			{
				if(!(stripos($field->getType(),'timestamp')===false)) continue;
				$farr[]="`".$field->getField()."`";
				$values[]="\t\t(\$this->".$field->getName()."==null?\"null\":\"'\".\$mres(\$link,\$this->".$field->getName().").\"'\").\"";
			}
		}
		$out.=implode(",",$farr).") \n\t\tvalues(\".\n".implode(",\".\n",$values)."\n\t\t)\";\n";
		//$out.="where `".$this->_keyField->getField()."`='\".mres(\$link,\$this->_".$this->_keyField->getName().").\"' limit 1\";\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(mysqli_error(\$link));\n";
		$out.= "\t\tif (\$result === false)\n";
		$out.= "\t\t\treturn null;\n";
		$out.= "\t\telse{\$this->".$this->_keyField->getName()."=mysqli_insert_id(\$link);\n";
		$out.= "\t\t\treturn \$this;}\n";
		$out.= "\t}\n\n";		
		return $out;
	}
	private function _writeUpdate()
	{
		
		$out = "\tpublic function Update() {\n";
		$out.="\t\t\$mres = 'mysqli_real_escape_string';\n";
		$out.="\t\tglobal \$link;\n";
		$out.= "\t\t\$SQL = \"update `".$this->_tableName."` set \n";
		
		$arro=[];
		foreach ($this->_dbFields as $field)
		{
			if ($field->getField() != $this->_keyField->getField())
			{
				if(!(stripos($field->getType(),'timestamp')===false)) continue;
				$arro[]="\t\t`".$field->getField()."`=\".(\$this->".$field->getName()."==null?\"null\":\"'\".\$mres(\$link,\$this->".$field->getName().").\"'\").\"";
			}
		}
		$out.= implode(",\n",$arro);
		$out.="\n\t\twhere `".$this->_keyField->getField()."`='\".\$mres(\$link,\$this->".$this->_keyField->getName().").\"' limit 1\";\n";
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(mysqli_error(\$link));\n";
		$out.= "\t\tif (\$result === false)\n";
		$out.= "\t\t\treturn null;\n";
		$out.= "\t\telse\n";
		$out.= "\t\t\treturn \$this;\n";
		$out.= "\t}\n\n";		
		return $out;
	}
	
	private function _writeDelete()
	{
		
		$out = "\tpublic function Delete(\$where=\"\") {\n";
		$out.="\t\t\$mres = 'mysqli_real_escape_string';\n";
		$out.="\t\tglobal \$link;\n";
		
		$out.= "\t\t\$SQL = \"Delete from `".$this->_tableName."` where `".$this->_keyField->getField()."`='\".\$mres(\$link,\$this->".$this->_keyField->getName().").\"' \";\n";
		$out.="\t\tif(\$where)\n\t";
		$out.= "\t\t\$SQL = \"Delete from `".$this->_tableName."` where \".\$where;\n";
		
		$out.= "\t\t\$result = \$link->query(\$SQL) or die(mysqli_error(\$link));\n";
		$out.= "\t\treturn \$result;\n";
		$out.= "\t}\n\n";		
		return $out;
	}
	
}
/**
 * Small Helper Class,
 * There should be no need to instantiate this directly...
 *
 */
class ClassMember {
	
	public $field=null;
	public $name=null;
	public $dataType=null;
	public $index = false;
	
	public function ClassMember($fieldName, $displayName, $dataType=null, $index=false)
	{
		$this->_field = $fieldName;
		$this->_name = $displayName;
		$this->_dataType = $dataType;
		$this->_index = $index;
	}
	
	public function getField()
	{
		return($this->_field);
	}
	
	public function getName()
	{
		return($this->_name);
	}
	
	public function getType()
	{
		return($this->_dataType);
	}
	public function getIndex()
	{
		return($this->_index);
	}
}